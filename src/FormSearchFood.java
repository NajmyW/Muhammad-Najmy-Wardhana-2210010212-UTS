
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import com.opencsv.CSVParserBuilder;
import com.opencsv.CSVReader;
import com.opencsv.CSVReaderBuilder;
import com.opencsv.exceptions.CsvValidationException;
import java.awt.HeadlessException;
import javax.swing.*;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.filechooser.FileNameExtensionFilter;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Acer
 */
public final class FormSearchFood extends javax.swing.JFrame {

    /**
     * Creates new form FormSearchFood
     */
    // Konstruktor untuk kelas FormSearchFood
    public FormSearchFood() {
        // Inisialisasi komponen GUI
        initComponents();

        // Membuat model tabel dengan kolom berikut: ID, Nama, Bahan, Cara Membuat, dan URL
        tableModel = new DefaultTableModel(
            new String[]{"ID", "Nama Makanan/Minuman", "Bahan-Bahan", "Cara Membuat", "Url"}, 
            0 // Jumlah baris awal (kosong)
        );

        // Menghubungkan model tabel ke komponen tabel di GUI
        tableResep.setModel(tableModel);

        // Memperbarui isi tabel dengan data dari database
        refreshTable();
    }

    // Deklarasi variabel untuk menyimpan model tabel
    private final DefaultTableModel tableModel;

    // Membuat koneksi ke database menggunakan kelas Koneksi
    Connection conn = Koneksi.getKoneksi();

    // Membuat instance dari kelas Settings untuk pengelolaan data
    Settings data = new Settings();


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btnSimpan = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnUlang = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        searchData = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        inputMakan = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        inputTutorial = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        inputBahan = new javax.swing.JTextArea();
        inputUrl = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableResep = new javax.swing.JTable();
        btnEdit = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1405, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel2.setBackground(new java.awt.Color(102, 102, 0));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "FORM RESEP MAKANAN", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 24), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Masukan Cara Membuat :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        jPanel2.add(jLabel1, gridBagConstraints);

        jButton1.setText("Cari");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        jPanel2.add(jButton1, gridBagConstraints);

        btnSimpan.setText("Simpan");
        btnSimpan.setEnabled(false);
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        jPanel2.add(btnSimpan, gridBagConstraints);

        btnHapus.setText("Hapus");
        btnHapus.setEnabled(false);
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        jPanel2.add(btnHapus, gridBagConstraints);

        btnUlang.setText("Ulang");
        btnUlang.setEnabled(false);
        btnUlang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUlangActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        jPanel2.add(btnUlang, gridBagConstraints);

        jButton5.setText("Keluar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        jPanel2.add(jButton5, gridBagConstraints);

        searchData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDataActionPerformed(evt);
            }
        });
        searchData.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchDataKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 7);
        jPanel2.add(searchData, gridBagConstraints);

        jButton6.setText("Export (PDF)");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        jPanel2.add(jButton6, gridBagConstraints);

        jButton8.setText("Form Cari Online");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(jButton8, gridBagConstraints);

        inputMakan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputMakanKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.insets = new java.awt.Insets(7, 2, 7, 2);
        jPanel2.add(inputMakan, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Reference Url :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(2, 7, 7, 7);
        jPanel2.add(jLabel4, gridBagConstraints);

        inputTutorial.setColumns(20);
        inputTutorial.setRows(5);
        jScrollPane2.setViewportView(inputTutorial);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(jScrollPane2, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Masukan Bahan :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        jPanel2.add(jLabel2, gridBagConstraints);

        inputBahan.setColumns(20);
        inputBahan.setRows(5);
        jScrollPane3.setViewportView(inputBahan);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(jScrollPane3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.insets = new java.awt.Insets(7, 2, 7, 1);
        jPanel2.add(inputUrl, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Nama Makanan : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(2, 7, 7, 7);
        jPanel2.add(jLabel5, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        tableResep.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableResep.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableResepMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableResep);

        jPanel3.add(jScrollPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 19;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(jPanel3, gridBagConstraints);

        btnEdit.setText("Edit");
        btnEdit.setEnabled(false);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 10;
        jPanel2.add(btnEdit, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridLayout(1, 0));

        textArea.setEditable(false);
        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane4.setViewportView(textArea);

        jPanel4.add(jScrollPane4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 19;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 500;
        jPanel2.add(jPanel4, gridBagConstraints);

        jButton2.setText("Import (CSV)");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 10;
        jPanel2.add(jButton2, gridBagConstraints);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
         // Membuat instance dari kelas FormCariResep_API, dengan `this` sebagai parameter
        // `this` digunakan untuk melewatkan referensi ke objek saat ini, mungkin untuk komunikasi antara form
        var vk = new FormCariResep_API(this);
        // Menampilkan form yang baru dibuat dengan mengatur visibilitasnya ke true
        // FormCariResep_API akan muncul di layar pengguna
        vk.setVisible(true);

    }//GEN-LAST:event_jButton8ActionPerformed

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
       
    // Mengambil nilai input dari field teks
    String namaMakanan = inputMakan.getText(); // Input untuk nama makanan
    String bahan = inputBahan.getText();       // Input untuk bahan
    String tutor = inputTutorial.getText();   // Input untuk tutorial/cara membuat
    String urls = inputUrl.getText();         // Input untuk URL

    // Validasi apakah field nama makanan, bahan, dan tutorial kosong
    if (namaMakanan.isEmpty() && bahan.isEmpty() && tutor.isEmpty()) {
        // Menampilkan pesan error jika input belum lengkap
        JOptionPane.showMessageDialog(
            null, 
            "Mohon Isi data Nama Makanan, Bahan, Cara Membuat terlebih dahulu!", 
            "Gagal Menyimpan", 
            JOptionPane.INFORMATION_MESSAGE
        );
    } else {
        try {
            // Memanggil metode addData pada objek `data` untuk menyimpan data ke database
            // Parameter `true` digunakan untuk menampilkan pesan sukses
            data.addData(namaMakanan, bahan, tutor, urls, true);

            // Menonaktifkan tombol Simpan agar tidak bisa diklik lagi
            btnSimpan.setEnabled(false);

            // Mengaktifkan tombol Ulang untuk memungkinkan reset input
            btnUlang.setEnabled(true);

            // Mengosongkan semua field input setelah berhasil menyimpan data
            inputMakan.setText("");
            inputBahan.setText("");
            inputUrl.setText("");
            inputTutorial.setText("");

            // Mengatur fokus kembali ke field inputMakan
            inputMakan.requestFocus();

            // Memperbarui tabel untuk menampilkan data terbaru
            refreshTable();

        } catch (SQLException ex) {
            // Menangkap dan mencatat error jika terjadi masalah saat menyimpan data
            Logger.getLogger(FormSearchFood.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void tableResepMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableResepMouseClicked
        // Mendapatkan indeks baris yang dipilih di tabel
        int row = tableResep.getSelectedRow();

        // Mengisi input field dengan data dari tabel berdasarkan baris yang dipilih
        inputMakan.setText(tableResep.getValueAt(row, 1).toString()); // Mengambil nilai kolom "Nama Makanan/Minuman"
        inputBahan.setText(tableResep.getValueAt(row, 2).toString()); // Mengambil nilai kolom "Bahan-Bahan"
        inputTutorial.setText(tableResep.getValueAt(row, 3).toString()); // Mengambil nilai kolom "Cara Membuat"
        inputUrl.setText(tableResep.getValueAt(row, 4).toString()); // Mengambil nilai kolom "Url"

        // Membuat deskripsi detail dari data yang dipilih
        String desc = "Nama Makanan : " + tableResep.getValueAt(row, 1).toString() + "\n"
                    + "Reference : " + tableResep.getValueAt(row, 4).toString() + "\n\n"
                    + "Bahan-Bahan : \n" + tableResep.getValueAt(row, 2).toString() + "\n\n"
                    + "Cara Membuat : \n" + tableResep.getValueAt(row, 3).toString();

        // Menampilkan deskripsi pada komponen `textArea`
        textArea.setText(desc);
        // Mengatur status tombol-tombol sesuai dengan kondisi saat ini
        btnEdit.setEnabled(true);  // Mengaktifkan tombol Edit untuk mengizinkan pengeditan data
        btnHapus.setEnabled(true); // Mengaktifkan tombol Hapus untuk mengizinkan penghapusan data
        btnUlang.setEnabled(true); // Mengaktifkan tombol Ulang untuk mengizinkan pengosongan field
        btnSimpan.setEnabled(false); // Menonaktifkan tombol Simpan karena data sedang dalam mode edit
    }//GEN-LAST:event_tableResepMouseClicked

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        // TODO add your handling code here:
        deleteData();
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnUlangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUlangActionPerformed
     // Mengosongkan field input untuk nama makanan
     inputMakan.setText("");

     // Mengatur fokus kembali ke field input nama makanan agar siap untuk diisi ulang
     inputMakan.requestFocus();

     // Mengosongkan area teks yang digunakan untuk menampilkan deskripsi detail
     textArea.setText("");

     // Mengosongkan field input untuk bahan makanan
     inputBahan.setText("");

     // Mengosongkan field input untuk URL referensi
     inputUrl.setText("");

     // Mengosongkan field input untuk tutorial/cara membuat
     inputTutorial.setText("");

     // Menonaktifkan tombol Ulang karena semua input sudah kosong
     btnUlang.setEnabled(false);

     // Menonaktifkan tombol Edit karena tidak ada data yang dipilih untuk diedit
     btnEdit.setEnabled(false);

     // Menonaktifkan tombol Hapus karena tidak ada data yang dipilih untuk dihapus
     btnHapus.setEnabled(false);

    }//GEN-LAST:event_btnUlangActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
     // Memanggil metode updateData untuk memperbarui data di database atau tabel
    updateData();

    // Mengosongkan area teks (textArea) yang digunakan untuk menampilkan detail atau deskripsi
    textArea.setText("");
    }//GEN-LAST:event_btnEditActionPerformed

    private void inputMakanKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputMakanKeyReleased
       // Mengecek apakah field input untuk nama makanan (inputMakan) kosong
        if (inputMakan.getText().isEmpty()) {
            // Jika kosong, tombol Simpan (btnSimpan) dinonaktifkan untuk mencegah penyimpanan data yang tidak lengkap
            btnSimpan.setEnabled(false);
        } else {
            // Jika tidak kosong, tombol Simpan diaktifkan untuk memungkinkan pengguna menyimpan data
            btnSimpan.setEnabled(true);
        }
    }//GEN-LAST:event_inputMakanKeyReleased

    private void searchDataKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchDataKeyReleased
        // Mengecek apakah input pencarian (searchData) tidak kosong
        if (!searchData.getText().isEmpty()) {
            // Jika tidak kosong, panggil metode searchData untuk mencari data berdasarkan input pencarian
            searchData();

            // Mengosongkan area teks (textArea) setelah pencarian dilakukan
            textArea.setText("");
        } else {
            // Jika input pencarian kosong, kosongkan area teks (textArea)
            textArea.setText("");

            // Memperbarui tabel dengan semua data dari database
            refreshTable();
        }
    }//GEN-LAST:event_searchDataKeyReleased

    private void searchDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchDataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchDataActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Mengecek apakah input pencarian (searchData) tidak kosong
        if (!searchData.getText().isEmpty()) {
            // Jika tidak kosong, panggil metode searchData untuk mencari data berdasarkan input pencarian
            searchData();
        } else {
            // Jika input pencarian kosong, panggil metode refreshTable untuk menampilkan semua data
            refreshTable();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        textArea.setText(tableModel.getColumnCount()+"");
        if (tableModel == null || tableModel.getRowCount() == 0) {
    JOptionPane.showMessageDialog(
        null, 
        "Database kosong! Belum ada satupun data yang disimpan.",
        "Gagal Menyimpan Database ke PDF & CSV",
        JOptionPane.INFORMATION_MESSAGE
    );
} else {
        saveToPDF(); //menyimpan data jadi pdf
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      try {
        // Memanggil metode importCSV untuk mengimpor data dari file CSV
        importCSV();
    } catch (CsvValidationException | SQLException ex) {
        // Menangkap kesalahan yang mungkin terjadi selama proses impor
        // Kesalahan yang ditangkap bisa berupa:
        // - CsvValidationException: Jika ada masalah dengan validasi format CSV
        // - SQLException: Jika terjadi masalah dengan operasi database
        Logger.getLogger(FormSearchFood.class.getName()).log(Level.SEVERE, null, ex);
        // Mencatat error ke log dengan level SEVERE untuk membantu debugging
    }
    }//GEN-LAST:event_jButton2ActionPerformed

   private void saveToCSV() {
    // Nama file CSV tempat data akan disimpan
    String fileName = "resep_makanan.csv";

    try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileName))) {
        // Menulis baris header untuk file CSV
        writer.write("ID,Nama Makanan/Minuman,Bahan-Bahan,Cara Membuat,Link");
        writer.newLine(); // Menambahkan baris baru setelah header

        // Iterasi melalui semua baris data di tableModel
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            StringBuilder row = new StringBuilder(); // Menyimpan data untuk satu baris

            // Iterasi melalui semua kolom pada baris tersebut
            for (int j = 0; j < tableModel.getColumnCount(); j++) {
                // Mengambil nilai dari cell pada baris dan kolom tertentu
                Object cellData = tableModel.getValueAt(i, j);
                String cellValue = (cellData != null) ? cellData.toString() : ""; // Jika null, set sebagai string kosong

                // Menangani data yang mengandung karakter khusus (koma, tanda kutip, newline)
                if (cellValue.contains(",") || cellValue.contains("\"") || cellValue.contains("\n")) {
                    // Ganti newline dengan spasi agar format lebih rapi di file CSV
                    cellValue = cellValue.replace("\n", " ");
                    // Escape tanda kutip dengan menggandakan tanda kutip
                    cellValue = "\"" + cellValue.replace("\"", "\"\"") + "\"";
                }

                // Tambahkan data ke baris
                row.append(cellValue);

                // Tambahkan koma kecuali untuk kolom terakhir
                if (j < tableModel.getColumnCount() - 1) {
                    row.append(",");
                }
            }

            // Menulis baris ke file CSV
            writer.write(row.toString());
            writer.newLine(); // Baris baru setelah setiap data
        }

        // Menampilkan pesan sukses kepada pengguna
        JOptionPane.showMessageDialog(this, "Data saved to " + fileName);
    } catch (IOException e) {
        // Menangkap kesalahan IO saat menyimpan data dan menampilkan pesan error
        JOptionPane.showMessageDialog(this, "Error saving data to CSV: " + e.getMessage());
    }
}


private void importCSV() throws CsvValidationException, SQLException {
    // Membuka dialog untuk memilih file CSV
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Choose CSV File to Import");
    fileChooser.setAcceptAllFileFilterUsed(false); // Tidak menerima semua tipe file

    // Menambahkan filter agar hanya file CSV yang dapat dipilih
    FileNameExtensionFilter filter = new FileNameExtensionFilter("CSV Files", "csv");
    fileChooser.addChoosableFileFilter(filter);

    // Menampilkan dialog dan mendapatkan hasilnya
    int result = fileChooser.showOpenDialog(this);

    // Jika pengguna memilih file (APPROVE_OPTION)
    if (result == JFileChooser.APPROVE_OPTION) {
        File selectedFile = fileChooser.getSelectedFile(); // File yang dipilih pengguna

        // Membaca file CSV menggunakan CSVReader
        try (CSVReader reader = new CSVReaderBuilder(new FileReader(selectedFile))
                .withCSVParser(new CSVParserBuilder().withSeparator(',').build()) // Menggunakan pemisah koma (,)
                .build()) {

            String[] nextLine;
            boolean skipHeader = true; // Variabel untuk melewati header

            // Membaca setiap baris dalam file CSV
            while ((nextLine = reader.readNext()) != null) {
                if (skipHeader) {
                    skipHeader = false; // Melewati header pada baris pertama
                    continue;
                }

                // Validasi jumlah kolom pada baris
                if (nextLine.length < 5) {
                    JOptionPane.showMessageDialog(this, "Invalid CSV format. Skipping row.");
                    continue; // Lewati baris jika jumlah kolom tidak cukup
                }

                // Mengambil data dari setiap kolom dalam baris
                String id = nextLine[0]; // Kolom ID
                String nama = nextLine[1]; // Kolom Nama
                String bahan = nextLine[2].replaceAll("     ", "\n"); // Mengganti indentasi menjadi newline
                String caraMembuat = nextLine[3].replaceAll("     ", "\n"); // Mengganti indentasi menjadi newline
                String link = nextLine[4]; // Kolom Link

                // Menambahkan data ke dalam tableModel (untuk ditampilkan di tabel)
                tableModel.addRow(new Object[]{
                    id,
                    nama,
                    bahan,
                    caraMembuat,
                    link
                });

                // Menambahkan data ke database menggunakan metode addData
                data.addData(nama, bahan, caraMembuat, link, false); // Parameter false untuk mencegah pesan sukses berulang
            }

            // Menampilkan pesan sukses jika semua data berhasil diimpor
            JOptionPane.showMessageDialog(this, "Data imported successfully!");
        } catch (IOException e) {
            // Menangkap kesalahan saat membaca file CSV
            JOptionPane.showMessageDialog(this, "Error reading CSV file: " + e.getMessage());
        } catch (CsvValidationException e) {
            // Menangkap kesalahan validasi format CSV
            JOptionPane.showMessageDialog(this, "Invalid CSV format: " + e.getMessage());
        }
    }
}

    private void saveToPDF() {
    // Nama file PDF yang akan disimpan
    String fileName = "resep_makanan.pdf";

    try {
    
        // Membuat objek Document untuk PDF dengan ukuran halaman A4
        Document document = new Document(PageSize.A4);

        // Menghubungkan dokumen dengan FileOutputStream menggunakan PdfWriter
        PdfWriter.getInstance(document, new FileOutputStream(fileName));

        // Membuka dokumen untuk penulisan
        document.open();

        // Menambahkan judul ke PDF dengan font tebal dan ukuran 16
        Paragraph title = new Paragraph("Data Resep Makanan", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16));
        title.setAlignment(Element.ALIGN_CENTER);  // Mengatur judul rata tengah
        document.add(title);

        // Menambahkan spasi sebelum tabel
        document.add(new Paragraph(" "));
        document.add(new Paragraph(" ")); // Spasi tambahan

        // Membuat tabel dengan jumlah kolom sesuai dengan tableModel
        int columnCount = tableModel.getColumnCount();
        PdfPTable table = new PdfPTable(columnCount); // Tabel PDF dengan jumlah kolom yang sesuai

        // Menambahkan header ke tabel
        for (int i = 0; i < columnCount; i++) {
            PdfPCell headerCell = new PdfPCell(new Phrase(tableModel.getColumnName(i))); // Header dari nama kolom
            headerCell.setHorizontalAlignment(Element.ALIGN_CENTER);  // Rata tengah untuk header
            headerCell.setVerticalAlignment(Element.ALIGN_MIDDLE);  // Rata tengah vertikal
            table.addCell(headerCell); // Menambahkan header ke tabel
        }

        // Menambahkan data dari tableModel ke dalam tabel PDF
        Font tableFont = FontFactory.getFont("Times New Roman", 12);  // Font untuk isi tabel
        for (int i = 0; i < tableModel.getRowCount(); i++) { // Iterasi baris
            for (int j = 0; j < columnCount; j++) { // Iterasi kolom
                // Ambil data dari tabel dan tambahkan ke tabel PDF
                PdfPCell dataCell = new PdfPCell(new Phrase(tableModel.getValueAt(i, j).toString(), tableFont));

                // Mengatur rata kiri untuk kolom Bahan dan Cara Membuat, lainnya rata tengah
                if (j == 2 || j == 3) { // Kolom Bahan dan Cara Membuat
                    dataCell.setHorizontalAlignment(Element.ALIGN_LEFT); // Rata kiri
                } else {
                    dataCell.setHorizontalAlignment(Element.ALIGN_CENTER); // Rata tengah
                }

                dataCell.setVerticalAlignment(Element.ALIGN_MIDDLE); // Rata tengah vertikal
                table.addCell(dataCell); // Menambahkan data ke tabel
            }
        }

        // Mengatur properti tabel PDF
        table.setWidthPercentage(100);  // Mengatur lebar tabel agar mengisi seluruh halaman
        table.setSplitRows(false);  // Mencegah pemisahan baris tabel antar halaman
        document.add(table); // Menambahkan tabel ke dokumen

        // Menutup dokumen setelah selesai
        document.close();
        
        // Opsional: Simpan data ke CSV setelah berhasil menyimpan ke PDF
        saveToCSV();
        
        // Menampilkan pesan sukses
        JOptionPane.showMessageDialog(this, "Data saved to " + fileName);
    } catch (DocumentException | HeadlessException | FileNotFoundException e) {
        // Menampilkan pesan error jika terjadi masalah saat menyimpan data
        JOptionPane.showMessageDialog(this, "Error saving data to PDF: " + e.getMessage());
    }
}


   public String updateData() {
    // Mendapatkan indeks baris yang dipilih
    int row = tableResep.getSelectedRow();

    // Validasi: memastikan ada baris yang dipilih
    if (row == -1) {
        JOptionPane.showMessageDialog(this, "Please select a recipe to update.");
        return null;
    }

    // Mengambil data dari tabel dan input field
    String id = tableModel.getValueAt(row, 0).toString(); // ID dari tabel
    String namaMakanan = inputMakan.getText();            // Nama makanan
    String bahan = inputBahan.getText();                  // Bahan
    String tutor = inputTutorial.getText();               // Tutorial
    String urls = inputUrl.getText();                     // URL

    // Query SQL untuk memperbarui data
    String sql = "UPDATE recipes SET title = ?, bahan = ?, cara_membuat = ?, url = ? WHERE id = ?";

    try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
        // Mengatur parameter untuk query
        pstmt.setString(1, namaMakanan);
        pstmt.setString(2, bahan);
        pstmt.setString(3, tutor);
        pstmt.setString(4, urls);
        pstmt.setInt(5, Integer.parseInt(id)); // Mengkonversi ID ke integer

        // Eksekusi query untuk memperbarui data
        pstmt.executeUpdate();

        // Reset tombol dan input setelah data diperbarui
        btnUlang.setEnabled(false);
        btnEdit.setEnabled(false);
        btnHapus.setEnabled(false);
        btnSimpan.setEnabled(true);
        inputMakan.requestFocus();

        // Menampilkan pesan sukses kepada pengguna
        JOptionPane.showMessageDialog(null, "Data berhasil diperbarui", "Sukses", JOptionPane.INFORMATION_MESSAGE);

        // Memperbarui tabel dengan data terbaru
        refreshTable();

        // Mengosongkan semua input field
        inputMakan.setText("");
        inputBahan.setText("");
        inputUrl.setText("");
        inputTutorial.setText("");
    } catch (SQLException e) {
        // Menampilkan pesan error jika terjadi kesalahan SQL
        System.out.println(e.getMessage());
    }

    return null;
}

   private void searchData() {
    // Ambil input pencarian dari field searchData
    String searchQuery = searchData.getText();

    // Validasi: cek apakah input pencarian kosong
    if (searchQuery.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Search data cannot be empty."); // Pesan jika kosong
        return; // Menghentikan proses pencarian
    }

    // Query SQL untuk mencari data berdasarkan judul yang cocok dengan input
    String sql = "SELECT * FROM recipes WHERE title LIKE ?";

    try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
        // Mengatur parameter pencarian dengan wildcard (%) untuk fleksibilitas pencarian
        pstmt.setString(1, "%" + searchQuery + "%");

        // Eksekusi query dan dapatkan hasilnya
        ResultSet rs = pstmt.executeQuery();

        // Bersihkan data yang ada di tabel sebelum menampilkan hasil pencarian
        tableModel.setRowCount(0);

        // Iterasi hasil query dan tambahkan ke model tabel
        while (rs.next()) {
            tableModel.addRow(new Object[]{
                rs.getInt("id"),             // Ambil kolom ID
                rs.getString("title"),       // Ambil kolom judul/nama makanan
                rs.getString("bahan"),       // Ambil kolom bahan
                rs.getString("cara_membuat"),// Ambil kolom cara membuat
                rs.getString("url")          // Ambil kolom URL
            });
        }
    } catch (SQLException e) {
        // Cetak pesan kesalahan jika ada masalah dengan SQL
        System.out.println(e.getMessage());
    }
}

public String deleteData() {
    // Mendapatkan indeks baris yang dipilih
    int row = tableResep.getSelectedRow();

    // Validasi: memastikan ada baris yang dipilih
    if (row == -1) {
        JOptionPane.showMessageDialog(this, "Please select a recipe to delete."); // Pesan jika tidak ada baris yang dipilih
        return null;
    }

    // Mengambil ID dari baris yang dipilih
    String id = tableModel.getValueAt(row, 0).toString();

    // Query SQL untuk menghapus data berdasarkan ID
    String sql = "DELETE FROM recipes WHERE id = ?";

    try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
        // Mengatur parameter ID untuk query
        pstmt.setInt(1, Integer.parseInt(id));

        // Menjalankan query untuk menghapus data
        pstmt.executeUpdate();

        // Reset tombol dan input setelah data dihapus
        btnUlang.setEnabled(false);
        btnEdit.setEnabled(false);
        btnHapus.setEnabled(false);
        btnSimpan.setEnabled(true);
        inputMakan.requestFocus();

        // Menampilkan pesan sukses kepada pengguna
        JOptionPane.showMessageDialog(null, "Data berhasil dihapuskan", "Sukses", JOptionPane.INFORMATION_MESSAGE);

        // Memperbarui tabel untuk mencerminkan perubahan
        refreshTable();

        // Mengosongkan area teks dan input
        textArea.setText("");
        inputMakan.setText("");
        inputBahan.setText("");
        inputUrl.setText("");
        inputTutorial.setText("");
    } catch (SQLException e) {
        // Menampilkan pesan error jika terjadi kesalahan SQL
        System.out.println(e.getMessage());
    }

    return null;
}

void refreshTable() {
    // Query SQL untuk mengambil semua data dari tabel recipes
    var sql = "SELECT * FROM recipes";

    // Debug statement untuk memastikan metode dipanggil
    System.out.println("refreshTable called.");

    // Validasi: pastikan tableModel sudah diinisialisasi
    if (tableModel == null) {
        System.err.println("Error: tableModel is still not initialized in refreshTable.");
        return;
    }

    try (Statement stmt = conn.createStatement(); 
         ResultSet rs = stmt.executeQuery(sql)) {
        // Menghapus data yang sudah ada di tabel
        tableModel.setRowCount(0);

        // Menambahkan data dari hasil query ke tabel
        while (rs.next()) {
            tableModel.addRow(new Object[]{
                rs.getInt("id"),             // Kolom ID
                rs.getString("title"),       // Kolom judul/nama makanan
                rs.getString("bahan"),       // Kolom bahan
                rs.getString("cara_membuat"),// Kolom cara membuat
                rs.getString("url")          // Kolom URL
            });
        }
    } catch (SQLException e) {
        // Menampilkan pesan error jika terjadi kesalahan SQL
        System.out.println(e.getMessage());
    }
}

    /**
     * @param args the command line arguments
     */    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormSearchFood.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormSearchFood.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormSearchFood.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormSearchFood.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormSearchFood().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JButton btnUlang;
    private javax.swing.JTextArea inputBahan;
    private javax.swing.JTextField inputMakan;
    private javax.swing.JTextArea inputTutorial;
    private javax.swing.JTextField inputUrl;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField searchData;
    private javax.swing.JTable tableResep;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
